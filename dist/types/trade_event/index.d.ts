import { BigNumber } from '@ethersproject/bignumber';
import { BlockTag, TransactionReceipt } from '@ethersproject/providers';
import { Board } from '../board';
import { CollateralUpdateData, CollateralUpdateEvent } from '../collateral_update_event';
import { DataSource } from '../constants/contracts';
import Lyra from '../lyra';
import { Market } from '../market';
import { Option } from '../option';
import { Position } from '../position';
import { QuoteFeeComponents } from '../quote';
import { Strike } from '../strike';
export type TradeLiquidation = {
    rewardBeneficiary: string;
    caller: string;
    returnCollateral: BigNumber;
    lpPremiums: BigNumber;
    lpFee: BigNumber;
    liquidatorFee: BigNumber;
    smFee: BigNumber;
    insolventAmount: BigNumber;
};
export type TradeEventData = {
    positionId: number;
    source: DataSource;
    marketName: string;
    marketAddress: string;
    blockNumber: number;
    timestamp: number;
    transactionHash: string;
    trader: string;
    size: BigNumber;
    isCall: boolean;
    isOpen: boolean;
    isBuy: boolean;
    isLong: boolean;
    strikeId: number;
    strikePrice: BigNumber;
    expiryTimestamp: number;
    spotPrice: BigNumber;
    pricePerOption: BigNumber;
    premium: BigNumber;
    fee: BigNumber;
    feeComponents: QuoteFeeComponents;
    iv: BigNumber;
    skew: BigNumber;
    baseIv: BigNumber;
    volTraded: BigNumber;
    collateralAmount?: BigNumber;
    collateralValue?: BigNumber;
    isBaseCollateral?: boolean;
    isForceClose: boolean;
    isLiquidation: boolean;
    liquidation?: TradeLiquidation;
    swap?: {
        fee: BigNumber;
        address: string;
    };
};
export type TradeEventListener = {
    off: () => void;
};
export type TradeEventListenerCallback = (trade: TradeEvent) => void;
export type TradeEventListenerOptions = {
    pollInterval?: number;
    startBlockNumber?: BlockTag;
};
export declare class TradeEvent {
    private __tradeData;
    private __collateralUpdateData?;
    __source: DataSource;
    lyra: Lyra;
    positionId: number;
    marketName: string;
    marketAddress: string;
    blockNumber: number;
    timestamp: number;
    transactionHash: string;
    trader: string;
    size: BigNumber;
    isCall: boolean;
    isOpen: boolean;
    isBuy: boolean;
    isLong: boolean;
    strikeId: number;
    strikePrice: BigNumber;
    expiryTimestamp: number;
    spotPrice: BigNumber;
    pricePerOption: BigNumber;
    premium: BigNumber;
    fee: BigNumber;
    feeComponents: QuoteFeeComponents;
    iv: BigNumber;
    volTraded: BigNumber;
    skew: BigNumber;
    baseIv: BigNumber;
    externalSwapFee?: BigNumber;
    externalSwapToken?: string;
    collateralAmount?: BigNumber;
    collateralValue?: BigNumber;
    isBaseCollateral?: boolean;
    isForceClose: boolean;
    isLiquidation: boolean;
    liquidation?: TradeLiquidation;
    swap?: {
        fee: BigNumber;
        address: string;
    };
    constructor(lyra: Lyra, trade: TradeEventData, collateralUpdate?: CollateralUpdateData);
    static getByHash(lyra: Lyra, transactionHashOrReceipt: string | TransactionReceipt): Promise<TradeEvent[]>;
    pnl(position: Position): BigNumber;
    newAverageCostPerOption(position: Position): BigNumber;
    prevAverageCostPerOption(position: Position): BigNumber;
    newSize(position: Position): BigNumber;
    prevSize(position: Position): BigNumber;
    collateralUpdate(): CollateralUpdateEvent | null;
    position(): Promise<Position>;
    option(): Promise<Option>;
    strike(): Promise<Strike>;
    board(): Promise<Board>;
    market(): Promise<Market>;
    static on(lyra: Lyra, callback: TradeEventListenerCallback, options?: TradeEventListenerOptions): TradeEventListener;
}
